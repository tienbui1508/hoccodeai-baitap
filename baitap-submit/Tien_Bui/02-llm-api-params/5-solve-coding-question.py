# Requirements: pip install openai

import re
import sys
from openai import OpenAI
import subprocess

client = OpenAI(
    base_url="https://api.together.xyz/v1",
    api_key="5170d1b0ae5f7a6f18b4cd8804fa153fc438026a1874b825e735295d961a35d7",
)


def clean_code(text):
    # Remove <think>...</think> blocks
    text = re.sub(r"<think>.*?</think>", "", text, flags=re.DOTALL)
    # Extract code inside code fences if present
    code_blocks = re.findall(r"```(?:python)?(.*?)```", text, flags=re.DOTALL)
    if code_blocks:
        text = code_blocks[0]
    # Remove any remaining code fences
    text = re.sub(r"```(?:python)?", "", text)
    text = re.sub(r"```", "", text)
    return text.strip()


def ask_ai_to_solve(question):
    system_prompt = """
You are an expert Python programmer. Given a natural language programming question from a user, write a complete, runnable Python script that:
	1.	Prints the original question.
	2.	Solves the question and prints the result.

The script should:
	•	Be saved as final.py and be ready to run directly.
	•	Include all necessary imports, functions, and main execution logic.
	•	Use input() to prompt the user only if the problem requires additional input (e.g. numbers, text, etc.).
	•	Contain basic error handling to avoid crashes on common input mistakes.
	•	Be clear, concise, and well-commented where appropriate.

Output only the raw Python code — no explanations, comments outside the code, or markdown formatting."""
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": question},
    ]
    response = client.chat.completions.create(
        messages=messages,
        # model="Qwen/Qwen3-235B-A22B-fp8-tput",
        model="meta-llama/Llama-3.3-70B-Instruct-Turbo-Free",
    )
    return response.choices[0].message.content.strip()


def main():
    question = input("Enter your programming question: ").strip()
    code = ask_ai_to_solve(question)
    code = clean_code(code)
    if not code:
        print("No code was generated by the AI.")
        return
    with open("final.py", "w", encoding="utf-8") as f:
        f.write(code)
    print("AI-generated code written to final.py. Running the code...\n")
    try:
        subprocess.run([sys.executable, "final.py"], check=True)
        print("\nCode executed successfully. Check final.py for the generated code.")
    except subprocess.CalledProcessError as e:
        print(f"Error running final.py: {e}. Please check the code for errors.")


if __name__ == "__main__":
    main()
